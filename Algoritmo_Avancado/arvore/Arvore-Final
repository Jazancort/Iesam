#include <iostream>
#include <cstring>

using namespace std;
/*Um nó de uma arvore binária possui dados, ponteiro para o filho
da esquerda e da direita*/

struct ARVORE{ //criação da arvore
  int num;
  struct ARVORE *esq, *dir;
  ARVORE(int num){
    this->num = num;
    esq = dir = NULL;
  }
	
};
//------------------------------------------------------------------//
void mostrarpreordem(ARVORE *aux){ //Função de mostrar a ordem dentro da arvore - PRE ORDEM
  if (aux == NULL)
    return;
    //da print dos dados no nó
  	cout << aux->num << " ";
    //retorna na subarvore da esquerda
    mostrarpreordem(aux->esq);
    //retorna na subarvore da direita
    mostrarpreordem(aux->dir);
  }


/*void mostraremordem(ARVORE *aux){ //Função de mostrar a ordem dentro da arvore
  if (aux == NULL)
    return;
    mostraremordem(aux->esq);
    cout << aux->num << " ";
    mostraremordem(aux->dir);
}*/

void mostrarposordem(ARVORE *aux){ //Função de mostrar a ordem dentro da arvore - POS ORDEM
  if (aux == NULL)
    return;
    //Primeiro na arvore da esquerda 
    mostrarposordem(aux->esq);
    //Segundo na arvore da direita
    mostrarposordem(aux->dir);
    //Agora com o nó
    cout << aux->num << " ";
}
//------------------------------------------------------------------//

/* Prototipos de função */
void printGivenLevel(ARVORE* raiz, int level);  
int altura(ARVORE* arvore);  
ARVORE* newArvore(int num);  
  
//Função de print de extensão
void printLevelOrder(ARVORE* raiz)  
{  
    int h = altura(raiz);  
    int i;  
    for (i = 1; i <= h; i++)  
        printGivenLevel(raiz, i);  
}  
  
//print de nós em determinado nivel
void printGivenLevel(ARVORE* raiz, int level)  
{  
    if (raiz == NULL)  
        return;  
    if (level == 1)  
        cout << raiz->num << " ";  
    else if (level > 1)  
    {  
        printGivenLevel(raiz->esq, level-1);  
        printGivenLevel(raiz->dir, level-1);  
    }  
}  
  
// Calcula a altura da uma arvore 
int altura(ARVORE* arvore)  
{  
    if (arvore == NULL)  
        return 0;  
    else
    {  
        //Calcula a altura de cada subarvore
        int ealtura = altura(arvore->esq);  
        int daltura = altura(arvore->dir);  
  
        //usa a maior
        if (ealtura > daltura)  
            return(ealtura + 1);  
        else return(daltura + 1);  
    }  
}  
//-----------------------------------------------------------------//  


int main() { //Faz rodar o programa
  struct ARVORE *raiz = new ARVORE(6); //definindo a raiz 
  raiz->esq             = new ARVORE(2); //definindo os nós e posição
  raiz->dir         = new ARVORE(7); 
  raiz->esq->esq     = new ARVORE(1); 
  raiz->esq->dir = new ARVORE(4);  
  raiz->esq->dir->esq = new ARVORE(3);
  raiz->esq->dir->dir = new ARVORE(5);
  raiz->dir->dir = new ARVORE(9) ;
  raiz->dir->dir->esq = new ARVORE(8); 

  //Print dos resultados:
  cout << "\nListando os elementos em pre-ordem: \n" << endl;
  mostrarpreordem(raiz);
  
  /*cout << "\nListando os elementos em ordem: \n" << endl;
  mostraremordem(raiz);*/
  
  cout << "\nListando os elementos em pos-ordem: \n" << endl;
  mostrarposordem(raiz);
  
  cout << "\nListando os elementos em extensão: \n";  
  printLevelOrder(raiz);  
  
  cout << "\n----------------------------------------------" << endl;
  }
